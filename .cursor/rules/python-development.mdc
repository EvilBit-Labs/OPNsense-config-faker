---
globs: **/*.py,**/pyproject.toml
alwaysApply: false
---
# Python Development Standards

## Project Setup

- Use **UV** package manager for dependency management
- Python 3.10+ required, 3.13 recommended
- Follow modern Python practices with type hints

## Code Style

- Use **Black** for code formatting
- Follow **PEP 8** style guidelines
- Use **isort** for import organization
- Use **mypy** for static type checking

## Dependencies

- **xsdata-pydantic**: For XSD-based model generation
- **pydantic**: For data validation and serialization
- **typer**: For CLI interface
- **lxml**: For XML processing
- **pytest**: For testing

## Type Safety

- Use type hints for all function parameters and return values
- Use Pydantic models for data validation
- Leverage generated models from XSD schema
- Use `from typing import` for complex types

## Testing

- Write unit tests for all core functionality
- Use pytest fixtures for test data
- Test both valid and invalid configurations
- Ensure XSD validation passes for generated configs

## Error Handling

- Use proper exception handling with specific exception types
- Provide clear error messages for validation failures
- Log errors appropriately for debugging
- Validate inputs before processing

## Documentation

- Use docstrings for all public functions and classes
- Follow Google or NumPy docstring format
- Document complex algorithms and business logic
- Keep README and documentation up to date

## File Organization

- Use meaningful module and package names
- Separate concerns into different modules
- Keep functions focused and single-purpose
- Use `__init__.py` files for package structure
