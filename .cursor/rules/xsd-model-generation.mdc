---
globs: opnsense/models/**/*,**/*.xml,**/*.xsd
alwaysApply: false
---
# XSD Model Generation Guide

## Overview

This project uses [xsdata-pydantic](https://xsdata-pydantic.readthedocs.io/en/latest/codegen/) to generate type-safe Pydantic models from the OPNsense XSD schema.

## Key Files

- [opnsense-config.xsd](mdc:opnsense-config.xsd) - The XSD schema file
- Generated models will be in `opnsense/models/` directory

## Generation Process

### 1. Install xsdata-pydantic

```bash
uv add xsdata-pydantic
```

### 2. Generate Models

```bash
xsdata opnsense-config.xsd --output pydantic --package opnsense.models --structure-style single-package
```

### 3. Configuration Options

Create a config file `xsdata-config.xml`:

```xml
<?xml version="1.0" encoding="UTF-8"?>
<Config xmlns="http://pypi.org/project/xsdata" version="22.3">
  <Output maxLineLength="88">
    <Package>opnsense.models</Package>
    <Format repr="true" eq="true" order="false" unsafeHash="false" frozen="false" slots="true" kwOnly="true">pydantic</Format>
    <Structure>single-package</Structure>
    <DocstringStyle>reStructuredText</DocstringStyle>
    <RelativeImports>false</RelativeImports>
  </Output>
  <Conventions>
    <ClassName case="pascalCase" safePrefix="type"/>
    <FieldName case="snakeCase" safePrefix="value"/>
    <ModuleName case="snakeCase" safePrefix="mod"/>
    <PackageName case="snakeCase" safePrefix="pkg"/>
  </Conventions>
</Config>
```

## Usage Pattern

### 1. Import Generated Models

```python
from opnsense.models import Opnsense, System, Interfaces, Vlans
```

### 2. Create Configuration

```python
config = Opnsense(
    system=System(...),
    interfaces=Interfaces(...),
    vlans=Vlans(...)
)
```

### 3. Validate and Serialize

```python
# Pydantic validation happens automatically
config.model_validate(config)

# Serialize to XML
xml_string = config.to_xml()
```

## Key Benefits

- **Type Safety**: Compile-time validation of configuration structure
- **Schema Compliance**: Perfect adherence to OPNsense XSD schema
- **IDE Support**: Full IntelliSense and autocomplete
- **Validation**: Built-in Pydantic validation with XSD constraints

## Integration with Tasks

- **TASK-005**: XSD Model Generation Setup
- **TASK-006**: XSD-Based Model Generation
- **TASK-024**: Pydantic Model Integration Framework

## Best Practices

- Regenerate models when XSD schema changes
- Use generated models for all configuration creation
- Leverage Pydantic validation for data integrity
- Test generated models with sample configurations
