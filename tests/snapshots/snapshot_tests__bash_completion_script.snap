---
source: tests/snapshot_tests.rs
expression: normalized
---
_opnsense-config-faker() { local i cur prev opts cmd COMPREPLY=() if [[ "${BASH_VERSINFO[0]}" -ge 4 ]]; then cur="$2" else cur="${COMP_WORDS[COMP_CWORD]}" fi prev="$3" cmd="" opts="" for i in "${COMP_WORDS[@]:0:COMP_CWORD}" do case "${cmd},${i}" in ",$1") cmd="opnsense__config__faker" ;; opnsense__config__faker,completions) cmd="opnsense__config__faker__completions" ;; opnsense__config__faker,csv) cmd="opnsense__config__faker__csv" ;; opnsense__config__faker,generate) cmd="opnsense__config__faker__generate" ;; opnsense__config__faker,help) cmd="opnsense__config__faker__help" ;; opnsense__config__faker,validate) cmd="opnsense__config__faker__validate" ;; opnsense__config__faker,xml) cmd="opnsense__config__faker__xml" ;; opnsense__config__faker__help,completions) cmd="opnsense__config__faker__help__completions" ;; opnsense__config__faker__help,csv) cmd="opnsense__config__faker__help__csv" ;; opnsense__config__faker__help,generate) cmd="opnsense__config__faker__help__generate" ;; opnsense__config__faker__help,help) cmd="opnsense__config__faker__help__help" ;; opnsense__config__faker__help,validate) cmd="opnsense__config__faker__help__validate" ;; opnsense__config__faker__help,xml) cmd="opnsense__config__faker__help__xml" ;; *) ;; esac done case "${cmd}" in opnsense__config__faker) opts="-q -o -h -V --quiet --no-color --output --help --version generate completions validate csv xml help" if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in --output) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; -o) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__completions) opts="-q -o -h --quiet --no-color --output --help bash zsh fish power-shell elvish" if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in --output) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; -o) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__csv) opts="-c -f -q -h --count --output --force --seed --quiet --no-color --help" if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in --count) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; -c) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --output) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --seed) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__generate) opts="-f -c -b -F -i -q -h --format --count --output --output-dir --base-config --csv-file --firewall-nr --opt-counter --force --seed --no-color --interactive --include-firewall-rules --firewall-rules-per-vlan --firewall-rule-complexity --quiet --help" if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in --format) COMPREPLY=($(compgen -W "csv xml" -- "${cur}")) return 0 ;; -f) COMPREPLY=($(compgen -W "csv xml" -- "${cur}")) return 0 ;; --count) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; -c) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --output) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --output-dir) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --base-config) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; -b) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --csv-file) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --firewall-nr) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --opt-counter) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --seed) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --firewall-rules-per-vlan) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --firewall-rule-complexity) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__help) opts="generate completions validate csv xml help" if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__help__completions) opts="" if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__help__csv) opts="" if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__help__generate) opts="" if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__help__help) opts="" if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__help__validate) opts="" if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__help__xml) opts="" if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__validate) opts="-i -f -v -q -o -h --input --format --verbose --max-errors --report --quiet --no-color --output --help" if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in --input) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; -i) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --format) COMPREPLY=($(compgen -W "auto csv xml" -- "${cur}")) return 0 ;; -f) COMPREPLY=($(compgen -W "auto csv xml" -- "${cur}")) return 0 ;; --max-errors) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --report) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --output) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; -o) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; opnsense__config__faker__xml) opts="-b -c -f -q -o -h --base-config --count --csv-file --output-dir --firewall-nr --opt-counter --force --seed --quiet --no-color --output --help" if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 fi case "${prev}" in --base-config) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; -b) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --count) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; -c) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --csv-file) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --output-dir) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --firewall-nr) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --opt-counter) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --seed) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; --output) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; -o) COMPREPLY=($(compgen -f "${cur}")) return 0 ;; *) COMPREPLY=() ;; esac COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") ) return 0 ;; esac } if [[ "${BASH_VERSINFO[0]}" -eq 4 && "${BASH_VERSINFO[1]}" -ge 4 || "${BASH_VERSINFO[0]}" -gt 4 ]]; then complete -F _opnsense-config-faker -o nosort -o bashdefault -o default opnsense-config-faker else complete -F _opnsense-config-faker -o bashdefault -o default opnsense-config-faker fi
