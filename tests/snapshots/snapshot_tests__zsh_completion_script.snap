---
source: tests/snapshot_tests.rs
expression: normalized
---
#compdef opnsense-config-faker autoload -U is-at-least _opnsense-config-faker() { typeset -A opt_args typeset -a _arguments_options local ret=1 if is-at-least 5.2; then _arguments_options=(-s -S -C) else _arguments_options=(-s -C) fi local context curcontext="$curcontext" state line _arguments "${_arguments_options[@]}" : \ '-h[Print help]' \ '--help[Print help]' \ '-V[Print version]' \ '--version[Print version]' \ ":: :_opnsense-config-faker_commands" \ "*::: :->opnsense-config-faker" \ && ret=0 case $state in (opnsense-config-faker) words=($line[1] "${words[@]}") (( CURRENT += 1 )) curcontext="${curcontext%:*:*}:opnsense-config-faker-command-$line[1]:" case $line[1] in (generate) _arguments "${_arguments_options[@]}" : \ '-f+[Output format (csv or xml)]:FORMAT:((csv\:"Generate CSV file with VLAN configuration data" xml\:"Generate complete OPNsense XML configuration"))' \ '--format=[Output format (csv or xml)]:FORMAT:((csv\:"Generate CSV file with VLAN configuration data" xml\:"Generate complete OPNsense XML configuration"))' \ '-c+[Number of VLAN configurations to generate]:COUNT:_default' \ '--count=[Number of VLAN configurations to generate]:COUNT:_default' \ '-o+[Output file path (for CSV format) or directory (for XML format)]:OUTPUT:_files' \ '--output=[Output file path (for CSV format) or directory (for XML format)]:OUTPUT:_files' \ '--output-dir=[Output directory for generated XML files (XML format only)]:OUTPUT_DIR:_files' \ '-b+[Base OPNsense configuration XML file (required for XML format)]:BASE_CONFIG:_files' \ '--base-config=[Base OPNsense configuration XML file (required for XML format)]:BASE_CONFIG:_files' \ '(-c --count)--csv-file=[Use existing CSV file for configuration data (XML format only)]:CSV_FILE:_files' \ '--firewall-nr=[Firewall number for naming (used in filenames for XML format)]:FIREWALL_NR:_default' \ '--opt-counter=[OPT interface counter starting value (XML format only)]:OPT_COUNTER:_default' \ '--seed=[Random seed for reproducible generation]:SEED:_default' \ '-F[Force overwrite existing files]' \ '--force[Force overwrite existing files]' \ '--no-color[Disable colored output (useful for scripts and CI)]' \ '-i[Interactive mode - prompt for missing required arguments]' \ '--interactive[Interactive mode - prompt for missing required arguments]' \ '-h[Print help (see more with '\''--help'\'')]' \ '--help[Print help (see more with '\''--help'\'')]' \ && ret=0 ;; (completions) _arguments "${_arguments_options[@]}" : \ '-h[Print help]' \ '--help[Print help]' \ ':shell -- Shell to generate completions for:(bash zsh fish power-shell elvish)' \ && ret=0 ;; (csv) _arguments "${_arguments_options[@]}" : \ '-c+[Number of VLAN configurations to generate]:COUNT:_default' \ '--count=[Number of VLAN configurations to generate]:COUNT:_default' \ '-o+[Output CSV file path]:OUTPUT:_files' \ '--output=[Output CSV file path]:OUTPUT:_files' \ '--seed=[Random seed for reproducible generation]:SEED:_default' \ '-f[Force overwrite existing files]' \ '--force[Force overwrite existing files]' \ '-h[Print help]' \ '--help[Print help]' \ && ret=0 ;; (xml) _arguments "${_arguments_options[@]}" : \ '-b+[Base OPNsense configuration XML file]:BASE_CONFIG:_files' \ '--base-config=[Base OPNsense configuration XML file]:BASE_CONFIG:_files' \ '-c+[Number of VLAN configurations to generate (if not using CSV)]:COUNT:_default' \ '--count=[Number of VLAN configurations to generate (if not using CSV)]:COUNT:_default' \ '(-c --count)--csv-file=[Use existing CSV file for configuration data]:CSV_FILE:_files' \ '-o+[Output directory for generated XML files]:OUTPUT_DIR:_files' \ '--output-dir=[Output directory for generated XML files]:OUTPUT_DIR:_files' \ '--firewall-nr=[Firewall number for naming (used in filenames)]:FIREWALL_NR:_default' \ '--opt-counter=[OPT interface counter starting value]:OPT_COUNTER:_default' \ '--seed=[Random seed for reproducible generation]:SEED:_default' \ '-f[Force overwrite existing files]' \ '--force[Force overwrite existing files]' \ '-h[Print help]' \ '--help[Print help]' \ && ret=0 ;; (help) _arguments "${_arguments_options[@]}" : \ ":: :_opnsense-config-faker__help_commands" \ "*::: :->help" \ && ret=0 case $state in (help) words=($line[1] "${words[@]}") (( CURRENT += 1 )) curcontext="${curcontext%:*:*}:opnsense-config-faker-help-command-$line[1]:" case $line[1] in (generate) _arguments "${_arguments_options[@]}" : \ && ret=0 ;; (completions) _arguments "${_arguments_options[@]}" : \ && ret=0 ;; (csv) _arguments "${_arguments_options[@]}" : \ && ret=0 ;; (xml) _arguments "${_arguments_options[@]}" : \ && ret=0 ;; (help) _arguments "${_arguments_options[@]}" : \ && ret=0 ;; esac ;; esac ;; esac ;; esac } (( $+functions[_opnsense-config-faker_commands] )) || _opnsense-config-faker_commands() { local commands; commands=( 'generate:Generate network configuration data in CSV or XML format' \ 'completions:Generate shell completions for the specified shell' \ 'csv:DEPRECATED\: Use '\''generate --format csv'\'' instead' \ 'xml:DEPRECATED\: Use '\''generate --format xml'\'' instead' \ 'help:Print this message or the help of the given subcommand(s)' \ ) _describe -t commands 'opnsense-config-faker commands' commands "$@" } (( $+functions[_opnsense-config-faker__completions_commands] )) || _opnsense-config-faker__completions_commands() { local commands; commands=() _describe -t commands 'opnsense-config-faker completions commands' commands "$@" } (( $+functions[_opnsense-config-faker__csv_commands] )) || _opnsense-config-faker__csv_commands() { local commands; commands=() _describe -t commands 'opnsense-config-faker csv commands' commands "$@" } (( $+functions[_opnsense-config-faker__generate_commands] )) || _opnsense-config-faker__generate_commands() { local commands; commands=() _describe -t commands 'opnsense-config-faker generate commands' commands "$@" } (( $+functions[_opnsense-config-faker__help_commands] )) || _opnsense-config-faker__help_commands() { local commands; commands=( 'generate:Generate network configuration data in CSV or XML format' \ 'completions:Generate shell completions for the specified shell' \ 'csv:DEPRECATED\: Use '\''generate --format csv'\'' instead' \ 'xml:DEPRECATED\: Use '\''generate --format xml'\'' instead' \ 'help:Print this message or the help of the given subcommand(s)' \ ) _describe -t commands 'opnsense-config-faker help commands' commands "$@" } (( $+functions[_opnsense-config-faker__help__completions_commands] )) || _opnsense-config-faker__help__completions_commands() { local commands; commands=() _describe -t commands 'opnsense-config-faker help completions commands' commands "$@" } (( $+functions[_opnsense-config-faker__help__csv_commands] )) || _opnsense-config-faker__help__csv_commands() { local commands; commands=() _describe -t commands 'opnsense-config-faker help csv commands' commands "$@" } (( $+functions[_opnsense-config-faker__help__generate_commands] )) || _opnsense-config-faker__help__generate_commands() { local commands; commands=() _describe -t commands 'opnsense-config-faker help generate commands' commands "$@" } (( $+functions[_opnsense-config-faker__help__help_commands] )) || _opnsense-config-faker__help__help_commands() { local commands; commands=() _describe -t commands 'opnsense-config-faker help help commands' commands "$@" } (( $+functions[_opnsense-config-faker__help__xml_commands] )) || _opnsense-config-faker__help__xml_commands() { local commands; commands=() _describe -t commands 'opnsense-config-faker help xml commands' commands "$@" } (( $+functions[_opnsense-config-faker__xml_commands] )) || _opnsense-config-faker__xml_commands() { local commands; commands=() _describe -t commands 'opnsense-config-faker xml commands' commands "$@" } if [ "$funcstack[1]" = "_opnsense-config-faker" ]; then _opnsense-config-faker "$@" else compdef _opnsense-config-faker opnsense-config-faker fi
