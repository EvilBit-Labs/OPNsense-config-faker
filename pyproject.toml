[project]
name = "opnsense-config-faker"
version = "0.1.0"
description = "A flexible tool for generating realistic network configuration test data"
authors = [{ name = "EvilBit Labs", email = "contact@evilbitlabs.com" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10"
keywords = [
    "networking",
    "testing",
    "configuration",
    "data-generation",
    "opnsense",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: System :: Networking",
    "Topic :: Software Development :: Testing",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    "faker>=37.5.3", # For realistic network data generation
    "typer>=0.12.0", # For modern CLI interface
    "rich>=14.1.0",  # For enhanced terminal output
    "lxml>=5.0.0",   # For XML configuration generation (OPNsense)
]

[project.optional-dependencies]
# No optional dependencies needed - all core functionality is included

[dependency-groups]
dev = [
    "ruff>=0.8.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.0.0",
    "polyfactory>=2.0.0",   # For generating test data
    "pre-commit>=3.0.0",    # For git hooks
    "basedpyright>=1.31.0", # For static type checking
    "deptry>=0.23.1",       # For dependency checks
]

[project.urls]
Homepage = "https://github.com/EvilBit-Labs/OPNsense-config-faker"
Repository = "https://github.com/EvilBit-Labs/OPNsense-config-faker"
Issues = "https://github.com/EvilBit-Labs/OPNsense-config-faker/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
only-include = ["generate_csv.py"]

[tool.ruff]
line-length = 119
target-version = "py310"
exclude = [
    "legacy/",          # Exclude legacy code from linting
    "**/__pycache__",
    "**/.pytest_cache",
    "**/htmlcov",
    "**/.coverage",
    "**/dist",
    "**/.git",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "COM812",  # Runs counter to Ruff formatting rules
    "C901",    # ignore complex code
    "D100",    # ignore missing docs
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D203",
    "D205",
    "D212",
    "D400",
    "D401",
    "D415",
    "E402",    # false positives for local imports
    "E501",    # line too long
    "EM102",   # Stupid error that doesn't make sense
    "EM101",   # Stupid error that doesn't make sense
    "FBT001",  # Stupid rule that doesn't make sense
    "FBT002",  # Stupid rule that doesn't make sense
    "FBT003",  # Stupid rule that doesn't make sense
    "G004",    # I don't care about this rule
    "T201",    # print statements are acceptable for CLI output
    "TRY003",  # external messages in exceptions are too verbose
    "TC001",
    "TC002",   # too many false positives from my own code
    "TC003",
    "TD002",
    "TD003",
    "TRY301",  # Not sure why this is an error
    "PLC0415", # Not sure if this is worth fixing
    "PLR0912", # too many arguments is sometimes fine
    "BLE001",  # Blind exception catching is sometimes necessary for fallback scenarios
    "SLF001",  # Private member access is sometimes necessary for testing/debugging
    "PLR0913", # too many arguments is sometimes fine
    "PLR0915", # too many arguments is sometimes fine
    "UP046",   # Generic class using Generic subclass instead of type parameters (Python 3.11 compatibility)
    "FIX002",  # Temporary ignore for ruff while I'm still implementing the changes
    "ERA001",  # Temporary ignore for ruff while I'm still implementing the changes
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 20
[tool.basedpyright]
pythonVersion = "3.10"
include = ["."] # Check all files by default
exclude = [
    "legacy/",          # Exclude legacy code from type checking
    ".venv/",           # Exclude virtual environment
    "venv/",            # Exclude virtual environment (alternative name)
    "**/__pycache__",
    "**/.pytest_cache",
    "**/htmlcov",
    "**/.coverage",
    "**/dist",
    "**/.git",
]
typeCheckingMode = "standard"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false
reportPrivateUsage = true
reportTypeCommentUsage = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportInconsistentConstructor = true
reportOverlappingOverload = true
reportConstantRedefinition = true
reportFunctionMemberAccess = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportUnknownParameterType = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownVariableType = true
reportUnknownMemberType = false
reportMissingParameterType = true
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportImplicitStringConcatenation = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.deptry]
# Exclude legacy code and virtual environment from dependency checking
exclude = ["legacy/", ".venv/", "venv/"]
# Map package names to their module names for packages that don't follow standard naming
package_module_name_map = { "pytest-cov" = "pytest_cov", "pre-commit" = "pre_commit" }
# Ignore unused and dev dependency issues
ignore = ["DEP002", "DEP004"]
# Mark dev dependencies as known first party to avoid unused warnings
known_first_party = ["tests"]
